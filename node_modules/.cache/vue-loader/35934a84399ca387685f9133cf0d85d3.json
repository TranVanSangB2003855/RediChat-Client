{"remainingRequest":"C:\\Users\\tranv\\Music\\socketio-example-PART-2\\socketio-vue\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\tranv\\Music\\socketio-example-PART-2\\socketio-vue\\src\\App.vue?vue&type=template&id=7ba5bd90","dependencies":[{"path":"C:\\Users\\tranv\\Music\\socketio-example-PART-2\\socketio-vue\\src\\App.vue","mtime":1676989621969},{"path":"C:\\Users\\tranv\\Music\\socketio-example-PART-2\\socketio-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676947860410},{"path":"C:\\Users\\tranv\\Music\\socketio-example-PART-2\\socketio-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1676947861784},{"path":"C:\\Users\\tranv\\Music\\socketio-example-PART-2\\socketio-vue\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1676947841760},{"path":"C:\\Users\\tranv\\Music\\socketio-example-PART-2\\socketio-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676947860410},{"path":"C:\\Users\\tranv\\Music\\socketio-example-PART-2\\socketio-vue\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1676947841100}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0iQXBwIj4KICAgIDxmb3JtIEBzdWJtaXQucHJldmVudD0ic3VibWl0VG9rZW4iPgogICAgICA8IS0tIDxpbnB1dCB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iRW50ZXIgdG9rZW4iIHYtbW9kZWw9InRva2VuIiAvPiAtLT4KICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiPkNoYXQgduG7m2kgbmfGsOG7nWkgbOG6oSBuw6BvICE8L2J1dHRvbj4KICAgIDwvZm9ybT4KICAgIDxidXR0b24gQGNsaWNrPSJzdG9wQ2hhdCgpIj5TdG9wPC9idXR0b24+CiAgICA8YnV0dG9uIEBjbGljaz0ibmV4dFJvb20oKSI+TmV4dDwvYnV0dG9uPgogICAgPGRpdiBjbGFzcz0iYm94Ij4KICAgICAgPGRpdiBjbGFzcz0ibWVzc2FnZXMiPgogICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj0idXNlciBpbiBtZXNzYWdlcyIgOmtleT0idXNlci5pZCI+CiAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBsZWZ0OyIgdi1pZj0idXNlci5uYW1lID09PSAnU3RyYW5nZXInIHx8IHVzZXIubmFtZSA9PT0gJ0JvdCciPgogICAgICAgICAgICA8Yj57eyB1c2VyLm5hbWUgfX06PC9iPiB7eyB1c2VyLm1lc3NhZ2UgfX0KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQ7IiB2LWVsc2U+CiAgICAgICAgICAgIHt7IHVzZXIubWVzc2FnZSB9fSA8Yj46e3sgdXNlci5uYW1lIH19PC9iPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Im1lc3NhZ2VzIj48L2Rpdj4KICAgICAgPGZvcm0gY2xhc3M9ImlucHV0LWRpdiIgQHN1Ym1pdC5wcmV2ZW50PSJzdWJtaXRNZXNzYWdlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IlR5cGUgaW4gdGV4dCIgdi1tb2RlbD0iaW5wdXRNZXNzYWdlVGV4dCIgLz4KICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCI+U3VibWl0PC9idXR0b24+CiAgICAgIDwvZm9ybT4KICAgIDwvZGl2PgogIDwvZGl2Pgo="},{"version":3,"sources":["C:\\Users\\tranv\\Music\\socketio-example-PART-2\\socketio-vue\\src\\App.vue"],"names":[],"mappings":";EAgGE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACvE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACd,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnnF,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;UAC3C,CAAC,CAAC,CAAC,CAAC,CAAC;UACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;UAC3C,CAAC,CAAC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACZ,CAAC,CAAC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC,CAAC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/tranv/Music/socketio-example-PART-2/socketio-vue/src/App.vue","sourceRoot":"","sourcesContent":["<!-- <template>\n  <div class=\"App\">\n    <form @submit.prevent=\"submitToken\">\n      <input type=\"text\" placeholder=\"Enter token\" v-model=\"token\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n    <div class=\"box\">\n      <div class=\"messages\">\n        <div v-for=\"user in messages\" :key=\"user.id\">\n          {{user.name}}: {{user.message}}\n        </div>\n      </div>\n      <div class=\"messages\"></div>\n      <form class=\"input-div\" @submit.prevent=\"submitMessage\">\n        <input type=\"text\" placeholder=\"Type in text\" v-model=\"inputMessageText\" />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport SocketioService from './services/socketio.service.js';\n\n// static data only for demo purposes, in real world scenario, this would be already stored on client\nconst SENDER = {\n  id: \"123\",\n  name: \"John Doe\",\n};\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data() {\n    return {\n      token: '',\n      inputMessageText: '',\n      messages: []\n    };\n  },\n  methods: {\n    submitToken() {\n      console.log(this.token);\n      SocketioService.setupSocketConnection(this.token);\n      SocketioService.subscribeToMessages((err, data) => {\n        console.log(data);\n        this.messages.push(data);\n      });\n    },\n    submitMessage() {\n      const CHAT_ROOM = \"myRandomChatRoomId\";\n      const message = this.inputMessageText;\n      SocketioService.sendMessage({message, roomName: CHAT_ROOM}, cb => {\n        // callback is acknowledgement from server\n        console.log(cb);\n        this.messages.push({\n          message,\n          ...SENDER\n        });\n        // clear the input after the message is sent\n        this.inputMessageText = '';\n      });\n    }\n  },\n  beforeUnmount() {\n    SocketioService.disconnect();\n  }\n}\n</script>\n\n<style>\n.App {\n  padding: 1rem;\n}\n\n.box {\n  width: fit-content;\n  height: 400px;\n  border: solid 1px #000;\n  display: flex;\n  flex-direction: column;\n  margin-top: 1rem;\n}\n\n.messages {\n  flex-grow: 1;\n}\n\n.input-div {\n  display: flex;\n  width: 100%;\n}\n</style> -->\n\n<template>\n  <div class=\"App\">\n    <form @submit.prevent=\"submitToken\">\n      <!-- <input type=\"text\" placeholder=\"Enter token\" v-model=\"token\" /> -->\n      <button type=\"submit\">Chat với người lạ nào !</button>\n    </form>\n    <button @click=\"stopChat()\">Stop</button>\n    <button @click=\"nextRoom()\">Next</button>\n    <div class=\"box\">\n      <div class=\"messages\">\n        <template v-for=\"user in messages\" :key=\"user.id\">\n          <div style=\"text-align: left;\" v-if=\"user.name === 'Stranger' || user.name === 'Bot'\">\n            <b>{{ user.name }}:</b> {{ user.message }}\n          </div>\n          <div style=\"text-align: right;\" v-else>\n            {{ user.message }} <b>:{{ user.name }}</b>\n          </div>\n        </template>\n      </div>\n      <div class=\"messages\"></div>\n      <form class=\"input-div\" @submit.prevent=\"submitMessage\">\n        <input type=\"text\" placeholder=\"Type in text\" v-model=\"inputMessageText\" />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport SocketioService from './services/socketio.service.js';\n\n// static data only for demo purposes, in real world scenario, this would be already stored on client\n// const SENDER = {\n//   id: \"123\",\n//   name: \"John Doe\",\n// };\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  mounted() {\n    this.toggleFormElements(\"form.input-div\",true);\n  },\n  data() {\n    return {\n      token: '',\n      inputMessageText: '',\n      messages: [],\n    };\n  },\n  methods: {\n    toggleFormElements(formSelected,bDisabled) {\n      let form = document.querySelector(formSelected);\n      let inputs = form.getElementsByTagName(\"input\");\n      for (let i = 0; i < inputs.length; i++) {\n        inputs[i].disabled = bDisabled;\n      }\n      let selects = form.getElementsByTagName(\"select\");\n      for (let i = 0; i < selects.length; i++) {\n        selects[i].disabled = bDisabled;\n      }\n      let textareas = form.getElementsByTagName(\"textarea\");\n      for (let i = 0; i < textareas.length; i++) {\n        textareas[i].disabled = bDisabled;\n      }\n      let buttons = form.getElementsByTagName(\"button\");\n      for (let i = 0; i < buttons.length; i++) {\n        buttons[i].disabled = bDisabled;\n      }\n    },\n    submitToken() {\n      console.log(this.token);\n      SocketioService.setupSocketConnection(this.token);\n      SocketioService.statusRoom((err, data) => {\n        console.log(data);\n        if (this.messages.length > 0) {\n          this.messages = [];\n        }\n        if(data.message === 'Strangers have entered the room'){\n          this.toggleFormElements(\"form.input-div\",false);\n        }\n        if(data.message)\n        this.messages.push(data);\n      });\n      SocketioService.receiveMessage((err, data) => {\n        console.log(data);\n        this.messages.push(data);\n      });\n    },\n    submitMessage() {\n      // const CHAT_ROOM = \"myRandomChatRoomId\";\n      console.log(\"sending message....\");\n      const message = this.inputMessageText;\n      SocketioService.sendMessage(message, cb => {\n        // callback is acknowledgement from server\n        console.log(cb);\n        this.messages.push({\n          message,\n          name: \"Me\"\n        });\n        // clear the input after the message is sent\n        this.inputMessageText = '';\n      });\n    },\n    stopChat() {\n      SocketioService.disconnect();\n      this.messages.push({\n        message: \"You left room !\",\n        name: \"Bot\"\n      });\n      this.toggleFormElements(\"form.input-div\",true);\n      // clear the input after the message is sent\n      this.inputMessageText = '';\n      \n    },\n    nextRoom() {\n      SocketioService.disconnect();\n      this.messages = [];\n      this.submitToken();\n    }\n  },\n  beforeUnmount() {\n    SocketioService.disconnect();\n  }\n  \n}\n</script>\n\n<style>\n.App {\n  padding: 1rem;\n}\n\n.box {\n  width: fit-content;\n  height: 400px;\n  border: solid 1px #000;\n  display: flex;\n  flex-direction: column;\n  margin-top: 1rem;\n  width: 310px;\n  overflow: scroll;\n}\n\n.messages {\n  flex-grow: 1;\n}\n\n.input-div {\n  display: flex;\n  width: 100%;\n}\n</style>\n\n\n\n\n<!-- <template>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n</template>\n\n<script>\nimport SocketioService from './services/socketio.service.js';\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  created() {\n    SocketioService.setupSocketConnection();\n  },\n  beforeUnmount() {\n    SocketioService.disconnect();\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style> -->\n\n"]}]}