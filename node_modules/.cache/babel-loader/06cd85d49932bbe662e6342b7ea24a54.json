{"remainingRequest":"D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\node_modules\\babel-loader\\lib\\index.js!D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\src\\App.vue?vue&type=template&id=7ba5bd90","dependencies":[{"path":"D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\src\\App.vue","mtime":1676989640331},{"path":"D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676947860410},{"path":"D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1676947861784},{"path":"D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1676947841760},{"path":"D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676947860410},{"path":"D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1676947841100}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCB7IGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgd2l0aE1vZGlmaWVycyBhcyBfd2l0aE1vZGlmaWVycywgcmVuZGVyTGlzdCBhcyBfcmVuZGVyTGlzdCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgdk1vZGVsVGV4dCBhcyBfdk1vZGVsVGV4dCwgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzIH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJBcHAiCn07Cgp2YXIgX2hvaXN0ZWRfMiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgdHlwZTogInN1Ym1pdCIKfSwgIkNoYXQgduG7m2kgbmfGsOG7nWkgbOG6oSBuw6BvICEiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfMyA9IHsKICBjbGFzczogImJveCIKfTsKdmFyIF9ob2lzdGVkXzQgPSB7CiAgY2xhc3M6ICJtZXNzYWdlcyIKfTsKdmFyIF9ob2lzdGVkXzUgPSB7CiAga2V5OiAwLAogIHN0eWxlOiB7CiAgICAidGV4dC1hbGlnbiI6ICJsZWZ0IgogIH0KfTsKdmFyIF9ob2lzdGVkXzYgPSB7CiAga2V5OiAxLAogIHN0eWxlOiB7CiAgICAidGV4dC1hbGlnbiI6ICJyaWdodCIKICB9Cn07Cgp2YXIgX2hvaXN0ZWRfNyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCB7CiAgY2xhc3M6ICJtZXNzYWdlcyIKfSwgbnVsbCwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzggPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnV0dG9uIiwgewogIHR5cGU6ICJzdWJtaXQiCn0sICJTdWJtaXQiLCAtMQovKiBIT0lTVEVEICovCik7CgpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJmb3JtIiwgewogICAgb25TdWJtaXQ6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gX3dpdGhNb2RpZmllcnMoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuc3VibWl0VG9rZW4gJiYgJG9wdGlvbnMuc3VibWl0VG9rZW4uYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9LCBbInByZXZlbnQiXSkpCiAgfSwgW19jcmVhdGVDb21tZW50Vk5vZGUoIiA8aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkVudGVyIHRva2VuXCIgdi1tb2RlbD1cInRva2VuXCIgLz4gIiksIF9ob2lzdGVkXzJdLCAzMgogIC8qIEhZRFJBVEVfRVZFTlRTICovCiAgKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnV0dG9uIiwgewogICAgb25DbGljazogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy5zdG9wQ2hhdCgpOwogICAgfSkKICB9LCAiU3RvcCIpLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgICBvbkNsaWNrOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLm5leHRSb29tKCk7CiAgICB9KQogIH0sICJOZXh0IiksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF80LCBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdCgkZGF0YS5tZXNzYWdlcywgZnVuY3Rpb24gKHVzZXIpIHsKICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCB7CiAgICAgIGtleTogdXNlci5pZAogICAgfSwgW3VzZXIubmFtZSA9PT0gJ1N0cmFuZ2VyJyB8fCB1c2VyLm5hbWUgPT09ICdCb3QnID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfNSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImIiLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKHVzZXIubmFtZSkgKyAiOiIsIDEKICAgIC8qIFRFWFQgKi8KICAgICksIF9jcmVhdGVUZXh0Vk5vZGUoIiAiICsgX3RvRGlzcGxheVN0cmluZyh1c2VyLm1lc3NhZ2UpLCAxCiAgICAvKiBURVhUICovCiAgICApXSkpIDogKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfNiwgW19jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyh1c2VyLm1lc3NhZ2UpICsgIiAiLCAxCiAgICAvKiBURVhUICovCiAgICApLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJiIiwgbnVsbCwgIjoiICsgX3RvRGlzcGxheVN0cmluZyh1c2VyLm5hbWUpLCAxCiAgICAvKiBURVhUICovCiAgICApXSkpXSwgNjQKICAgIC8qIFNUQUJMRV9GUkFHTUVOVCAqLwogICAgKTsKICB9KSwgMTI4CiAgLyogS0VZRURfRlJBR01FTlQgKi8KICApKV0pLCBfaG9pc3RlZF83LCBfY3JlYXRlRWxlbWVudFZOb2RlKCJmb3JtIiwgewogICAgY2xhc3M6ICJpbnB1dC1kaXYiLAogICAgb25TdWJtaXQ6IF9jYWNoZVs0XSB8fCAoX2NhY2hlWzRdID0gX3dpdGhNb2RpZmllcnMoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuc3VibWl0TWVzc2FnZSAmJiAkb3B0aW9ucy5zdWJtaXRNZXNzYWdlLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSwgWyJwcmV2ZW50Il0pKQogIH0sIFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaW5wdXQiLCB7CiAgICB0eXBlOiAidGV4dCIsCiAgICBwbGFjZWhvbGRlcjogIlR5cGUgaW4gdGV4dCIsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEuaW5wdXRNZXNzYWdlVGV4dCA9ICRldmVudDsKICAgIH0pCiAgfSwgbnVsbCwgNTEyCiAgLyogTkVFRF9QQVRDSCAqLwogICksIFtbX3ZNb2RlbFRleHQsICRkYXRhLmlucHV0TWVzc2FnZVRleHRdXSksIF9ob2lzdGVkXzhdLCAzMgogIC8qIEhZRFJBVEVfRVZFTlRTICovCiAgKV0pXSk7Cn0="},{"version":3,"sources":["D:\\OneDrive - vrrjd\\Desktop\\RediChat\\client\\src\\App.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- <template>\n  <div class=\"App\">\n    <form @submit.prevent=\"submitToken\">\n      <input type=\"text\" placeholder=\"Enter token\" v-model=\"token\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n    <div class=\"box\">\n      <div class=\"messages\">\n        <div v-for=\"user in messages\" :key=\"user.id\">\n          {{user.name}}: {{user.message}}\n        </div>\n      </div>\n      <div class=\"messages\"></div>\n      <form class=\"input-div\" @submit.prevent=\"submitMessage\">\n        <input type=\"text\" placeholder=\"Type in text\" v-model=\"inputMessageText\" />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport SocketioService from './services/socketio.service.js';\n\n// static data only for demo purposes, in real world scenario, this would be already stored on client\nconst SENDER = {\n  id: \"123\",\n  name: \"John Doe\",\n};\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data() {\n    return {\n      token: '',\n      inputMessageText: '',\n      messages: []\n    };\n  },\n  methods: {\n    submitToken() {\n      console.log(this.token);\n      SocketioService.setupSocketConnection(this.token);\n      SocketioService.subscribeToMessages((err, data) => {\n        console.log(data);\n        this.messages.push(data);\n      });\n    },\n    submitMessage() {\n      const CHAT_ROOM = \"myRandomChatRoomId\";\n      const message = this.inputMessageText;\n      SocketioService.sendMessage({message, roomName: CHAT_ROOM}, cb => {\n        // callback is acknowledgement from server\n        console.log(cb);\n        this.messages.push({\n          message,\n          ...SENDER\n        });\n        // clear the input after the message is sent\n        this.inputMessageText = '';\n      });\n    }\n  },\n  beforeUnmount() {\n    SocketioService.disconnect();\n  }\n}\n</script>\n\n<style>\n.App {\n  padding: 1rem;\n}\n\n.box {\n  width: fit-content;\n  height: 400px;\n  border: solid 1px #000;\n  display: flex;\n  flex-direction: column;\n  margin-top: 1rem;\n}\n\n.messages {\n  flex-grow: 1;\n}\n\n.input-div {\n  display: flex;\n  width: 100%;\n}\n</style> -->\n\n<template>\n  <div class=\"App\">\n    <form @submit.prevent=\"submitToken\">\n      <!-- <input type=\"text\" placeholder=\"Enter token\" v-model=\"token\" /> -->\n      <button type=\"submit\">Chat với người lạ nào !</button>\n    </form>\n    <button @click=\"stopChat()\">Stop</button>\n    <button @click=\"nextRoom()\">Next</button>\n    <div class=\"box\">\n      <div class=\"messages\">\n        <template v-for=\"user in messages\" :key=\"user.id\">\n          <div style=\"text-align: left;\" v-if=\"user.name === 'Stranger' || user.name === 'Bot'\">\n            <b>{{ user.name }}:</b> {{ user.message }}\n          </div>\n          <div style=\"text-align: right;\" v-else>\n            {{ user.message }} <b>:{{ user.name }}</b>\n          </div>\n        </template>\n      </div>\n      <div class=\"messages\"></div>\n      <form class=\"input-div\" @submit.prevent=\"submitMessage\">\n        <input type=\"text\" placeholder=\"Type in text\" v-model=\"inputMessageText\" />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport SocketioService from './services/socketio.service.js';\n\n// static data only for demo purposes, in real world scenario, this would be already stored on client\n// const SENDER = {\n//   id: \"123\",\n//   name: \"John Doe\",\n// };\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  mounted() {\n    this.toggleFormElements(\"form.input-div\",true);\n  },\n  data() {\n    return {\n      token: '',\n      inputMessageText: '',\n      messages: [],\n    };\n  },\n  methods: {\n    toggleFormElements(formSelected,bDisabled) {\n      let form = document.querySelector(formSelected);\n      let inputs = form.getElementsByTagName(\"input\");\n      for (let i = 0; i < inputs.length; i++) {\n        inputs[i].disabled = bDisabled;\n      }\n      let selects = form.getElementsByTagName(\"select\");\n      for (let i = 0; i < selects.length; i++) {\n        selects[i].disabled = bDisabled;\n      }\n      let textareas = form.getElementsByTagName(\"textarea\");\n      for (let i = 0; i < textareas.length; i++) {\n        textareas[i].disabled = bDisabled;\n      }\n      let buttons = form.getElementsByTagName(\"button\");\n      for (let i = 0; i < buttons.length; i++) {\n        buttons[i].disabled = bDisabled;\n      }\n    },\n    submitToken() {\n      console.log(this.token);\n      SocketioService.setupSocketConnection(this.token);\n      SocketioService.statusRoom((err, data) => {\n        console.log(data);\n        if (this.messages.length > 0) {\n          this.messages = [];\n        }\n        if(data.message === 'Strangers have entered the room'){\n          this.toggleFormElements(\"form.input-div\",false);\n        }\n        if(data.message === 'The stranger has escaped. Waiting for the next one ....'){\n          this.toggleFormElements(\"form.input-div\",true);\n        }\n        this.messages.push(data);\n      });\n      SocketioService.receiveMessage((err, data) => {\n        console.log(data);\n        this.messages.push(data);\n      });\n    },\n    submitMessage() {\n      // const CHAT_ROOM = \"myRandomChatRoomId\";\n      console.log(\"sending message....\");\n      const message = this.inputMessageText;\n      SocketioService.sendMessage(message, cb => {\n        // callback is acknowledgement from server\n        console.log(cb);\n        this.messages.push({\n          message,\n          name: \"Me\"\n        });\n        // clear the input after the message is sent\n        this.inputMessageText = '';\n      });\n    },\n    stopChat() {\n      SocketioService.disconnect();\n      this.messages.push({\n        message: \"You left room !\",\n        name: \"Bot\"\n      });\n      this.toggleFormElements(\"form.input-div\",true);\n      // clear the input after the message is sent\n      this.inputMessageText = '';\n      \n    },\n    nextRoom() {\n      SocketioService.disconnect();\n      this.messages = [];\n      this.submitToken();\n    }\n  },\n  beforeUnmount() {\n    SocketioService.disconnect();\n  }\n  \n}\n</script>\n\n<style>\n.App {\n  padding: 1rem;\n}\n\n.box {\n  width: fit-content;\n  height: 400px;\n  border: solid 1px #000;\n  display: flex;\n  flex-direction: column;\n  margin-top: 1rem;\n  width: 310px;\n  overflow: scroll;\n}\n\n.messages {\n  flex-grow: 1;\n}\n\n.input-div {\n  display: flex;\n  width: 100%;\n}\n</style>\n\n\n\n\n<!-- <template>\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n</template>\n\n<script>\nimport SocketioService from './services/socketio.service.js';\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  created() {\n    SocketioService.setupSocketConnection();\n  },\n  beforeUnmount() {\n    SocketioService.disconnect();\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style> -->\n\n"],"sourceRoot":""}]}